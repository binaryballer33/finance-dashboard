generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id           String   @id @default(cuid())
  email        String
  token        String   @unique
  expires      DateTime
  sixDigitCode Int

  @@unique([email, token])
}

model PasswordResetToken {
  id           String   @id @default(cuid())
  email        String
  token        String   @unique
  expires      DateTime
  sixDigitCode Int

  @@unique([email, token])
}

model TwoFactorToken {
  id           String   @id @default(cuid())
  email        String
  token        String   @unique
  expires      DateTime
  sixDigitCode Int

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id                      String                 @id @default(uuid())
  email                   String                 @unique
  emailVerified           DateTime?              @map("email_verified")
  encryptedPassword       String? // if you are using oauth to create the user, you will not have a password
  firstName               String
  lastName                String
  name                    String?
  imageUrl                String?
  image                   String
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  role                    Role                   @default(USER)
  accounts                Account[]
  incomes                 Income[]
  expenses                Expense[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation? // 1:1 relation to TwoFactorConfirmation
  twoFactorConfirmationId String?

  // put these indexes in later to measure the performance and database size difference
  // @@index([id, email, firstName, lastName, createdAt, updatedAt])
  @@map("users")
}

enum TradeRealized {
  GAIN
  LOSS
}

enum TradeType {
  SELL_CALL
  SELL_PUT
}

model Trade {
  id                   String        @id @default(cuid())
  contracts            Int
  profitLoss           Float
  profitLossPercentage Float
  buyToClose           Float
  sellToOpen           Float
  strike               Float
  ticker               String
  date                 DateTime
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  type                 TradeType
  realized             TradeRealized
}

model Income {
  id          String   @id @default(cuid())
  amount      Float
  date        DateTime
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  date        DateTime
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}
